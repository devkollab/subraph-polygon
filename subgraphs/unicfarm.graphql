# UnicFarm
type UnicFarm @entity {
  # Contract address
  id: ID!

  # Bonus multiplier
  mintRateMultiplier: BigInt!

  # Bonus end block
  mintRateDivider: BigInt!

  # Dev fund address
  devaddr: Bytes!

  # Migrator
  # migrator: Bytes!

  # Owner
  owner: Bytes!

  # Start block
  startBlock: BigInt!

  # blocksPerTranche
  blocksPerTranche: BigInt!

  # Unic
  unic: Bytes!

  # Unic per block
  unicPerBlock: BigInt!

  # Total allocation point
  totalAllocPoint: BigInt!

  # Pools
  pools: [Pool!]! @derivedFrom(field: "owner")

  # Pool count
  poolCount: BigInt!

  # UPT Balance
  uptBalance: BigDecimal!

  # UPT Age
  uptAge: BigDecimal!

  # UPT Removed
  uptAgeRemoved: BigDecimal!

  # UPT Deposited
  uptDeposited: BigDecimal!

  # UPT Withdrawn
  uptWithdrawn: BigDecimal!

  # History
  history: [History!]! @derivedFrom(field: "owner")

  # Upated at
  updatedAt: BigInt!
}

type History @entity {
  # Master chef id concatenated with timestamp
  id: ID!

  # Owner (UnicFarm, Pool, or User).
  owner: UnicFarm!

  # UPT Balance
  uptBalance: BigDecimal!

  # UPT Age
  uptAge: BigDecimal!

  # UPT Removed
  uptAgeRemoved: BigDecimal!

  # UPT Deposited
  uptDeposited: BigDecimal!

  # UPT Withdrawn
  uptWithdrawn: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}

# Pool
type Pool @entity {
  # Index of pool in poolInfo on UnicFarm contract
  id: ID!

  # Owner
  owner: UnicFarm!

  # Pair Liquidity Token Address
  pair: Bytes!

  # Allocation point
  allocPoint: BigInt!

  # Last reward block
  lastRewardBlock: BigInt!

  # Accumulated unic per share
  accUnicPerShare: BigInt!

  # UPT token balance
  balance: BigInt!

  # Pool users
  users: [User!]! @derivedFrom(field: "pool")

  # User count
  userCount: BigInt!

  # UPT Balance
  uptBalance: BigDecimal!

  # UPT Age
  uptAge: BigDecimal!

  # UPT Removed
  uptAgeRemoved: BigDecimal!

  # UPT Deposited
  uptDeposited: BigDecimal!

  # UPT Withdrawn
  uptWithdrawn: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Upated at
  updatedAt: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Unic harvested
  unicHarvested: BigDecimal!

  # Unic harvested
  unicHarvestedUSD: BigDecimal!
}

type PoolHistory @entity {
  # Pool id concatenated with timestamp
  id: ID!

  # Pool
  pool: Pool!

  # UPT Balance
  uptBalance: BigDecimal!

  # UPT Age
  uptAge: BigDecimal!

  # UPT Removed
  uptAgeRemoved: BigDecimal!

  # UPT Deposited
  uptDeposited: BigDecimal!

  # UPT Withdrawn
  uptWithdrawn: BigDecimal!

  # User Count
  userCount: BigInt!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Unic harvested
  unicHarvested: BigDecimal!

  # Unic harvested
  unicHarvestedUSD: BigDecimal!
}

type User @entity {
  # Pool id concatenated with user address
  id: ID!

  # User address
  address: Bytes!

  # Related pool
  pool: Pool

  # We do some fancy math here. Basically, any point in time, the amount of SUSHIs
  # entitled to a user but is pending to be distributed is:
  # pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt
  # Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:
  # 1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.
  # 2. User receives the pending reward sent to his/her address.
  # 3. User's `amount` gets updated.
  # 4. User's `rewardDebt` gets updated.

  # Amount
  amount: BigInt!

  # Reward debt
  rewardDebt: BigInt!

  # Entry USD
  entryUSD: BigDecimal!

  # Exit USD
  exitUSD: BigDecimal!

  # Unic at lockup
  unicAtLockup: BigDecimal!

  # Unic harvested
  unicHarvested: BigDecimal!

  # Unic harvested
  unicHarvestedUSD: BigDecimal!

  # Unic harvested since lockup
  unicHarvestedSinceLockup: BigDecimal!

  # Unic harvested since lockup USD
  unicHarvestedSinceLockupUSD: BigDecimal!

  # Timestamp
  timestamp: BigInt!

  # Block
  block: BigInt!
}
